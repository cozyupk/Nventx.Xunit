using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Xproof.SupportSourceGenerator
{
    public class AssertProofGeneratorBase
    {
        protected internal virtual void AppendFixedHeader(StringBuilder sb)
        {
            sb.AppendLine("#nullable enable"); 
            sb.AppendLine("// Auto-generated by xProof Generator");
            sb.AppendLine("// Do not edit this file directly.");
            sb.AppendLine();
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Linq;");
            sb.AppendLine("using System.Text;");
            sb.AppendLine("using System.Collections.Concurrent;");
            sb.AppendLine("using System.Collections.Immutable;");
            sb.AppendLine("using System.Collections.ObjectModel;");
            sb.AppendLine("using System.Diagnostics.CodeAnalysis;");
            sb.AppendLine("using System.Text.RegularExpressions;");
            sb.AppendLine("using System.ComponentModel;");
            sb.AppendLine("using System.Threading.Tasks;");
            sb.AppendLine("using System.Runtime.CompilerServices;");
            sb.AppendLine("using Xproof.BaseProofLibrary.Proofs;");
            sb.AppendLine();
        }

        protected internal static string FormatType(ITypeSymbol type) =>
            // 常に完全修飾＆最小限エスケープ。generic 重複を防止
            type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

        protected internal static string FormatParameterDecl(IParameterSymbol p)
        {
            var paramName = AvoidCollision(p.Name);
            var refKind = p.RefKind switch
            {
                RefKind.Out => "out ",
                RefKind.Ref => "ref ",
                RefKind.In => "in ",
                _ => string.Empty
            };

            // [AllowNull] をつける条件：
            // - NullableAnnotation.Annotated (つまり T? や string?)
            // - かつ [NotNull] 属性がついていない
            var hasNotNullAttr = p.GetAttributes()
                .Any(attr => attr.AttributeClass?.ToDisplayString() == "System.Diagnostics.CodeAnalysis.NotNullAttribute");

            var allowNull = p.NullableAnnotation == NullableAnnotation.Annotated && !hasNotNullAttr
                ? "[AllowNull] "
                : "";

            return $"{allowNull}{refKind}{FormatType(p.Type)} {paramName}";
        }

        protected internal static string ToAngleBracketedList(ImmutableArray<ITypeParameterSymbol> tps) =>
            tps.Length == 0 ? "" : $"<{string.Join(", ", tps.Select(tp => tp.Name))}>";

        protected internal static string AvoidCollision(string? name)
        {
            if (name == null)
            {
                return "";
            }
            return "arg_" + name;
        }
    }
}
